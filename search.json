[{"path":"https://bcgov.github.io/climr/articles/climr-with-rasters.html","id":"spatial-inputs-and-climr_downscale","dir":"Articles","previous_headings":"","what":"Spatial inputs and climr_downscale()","title":"Working with rasters and other spatial objects","text":"often start spatial object study area (raster vector format) point locations want obtain downscaled climate variables. Bellow show work spatial objects climr_downscale().","code":""},{"path":"https://bcgov.github.io/climr/articles/climr-with-rasters.html","id":"raster-inputs","dir":"Articles","previous_headings":"Spatial inputs and climr_downscale()","what":"Raster inputs","title":"Working with rasters and other spatial objects","text":"Often raster interest study area want full coverage downscaled climate variables. Since climr_downscale() accepts table point locations, need convert raster table cell coordinates, elevation (‘elev’) information unique point IDs.","code":""},{"path":"https://bcgov.github.io/climr/articles/climr-with-rasters.html","id":"raster-with-elevation-values-a-dem","dir":"Articles","previous_headings":"Spatial inputs and climr_downscale() > Raster inputs","what":"Raster with elevation values (a DEM)","title":"Working with rasters and other spatial objects","text":"raster DEM, points SpatVector inherits elevation cell values. DEM use 0 elevation values ocean areas. Since climr meant used downscale climate variables land, “clip” (set values outside polygon NAs) raster using land-polygon. Digital Elevation Model North Vancouver w/ w/o values outside polygon area making table raster cell (centroid) coordinates must preserve cell IDs (.data.frame(..., cell = TRUE)) can later convert clirm_downscale() outputs back raster format. Note cells NA’s automagically excluded. can now pass table cell locations climr_downscale(): convert outputs back raster format, simply need use original raster use extract point locations template make rasters downscaled climate values. Since location ids match raster cell IDs, dwscl_out$id column used index raster cells climate values assigning downscaled MAT values. climr_downscale() outputs converted raster layers","code":"library(climr) library(terra) library(data.table)  dem_vancouver <- get(data(\"dem_vancouver\")) |>   unwrap()  vancouver_poly <- get(data(\"vancouver_poly\")) |>   unwrap()  dem_vancouver <- crop(dem_vancouver, vancouver_poly) ## xy = TRUE ensures we get cell (centroid) coordinates ## cell = TRUE ensures we get cell ID numbers, which will be the point location IDs. xyzDT <- dem_vancouver |>   as.data.frame(., xy = TRUE, cell = TRUE) |>     as.data.table()  ## rename colums to climr standard setnames(xyzDT, c(\"id\", \"lon\", \"lat\", \"elev\")) xyzDT #>            id       lon      lat      elev #>         <num>     <num>    <num>     <num> #>     1:     62 -123.2486 49.49944  16.22222 #>     2:     63 -123.2478 49.49944  39.88889 #>     3:     64 -123.2469 49.49944  81.22222 #>     4:     65 -123.2461 49.49944 139.11111 #>     5:     66 -123.2453 49.49944 179.77777 #>    ---                                     #> 94025: 115196 -122.9036 49.30028 112.44444 #> 94026: 115197 -122.9028 49.30028 116.44444 #> 94027: 115198 -122.9019 49.30028 128.00000 #> 94028: 115199 -122.9011 49.30028 133.33333 #> 94029: 115200 -122.9003 49.30028 136.88889 ## in this case there's really no need for a spatial output format dwscl_out <- climr_downscale(xyzDT, which_normal = \"auto\",                              gcm_models = list_gcm()[1:3],                              ssp = list_ssp()[1],                              gcm_period = list_gcm_period(),                              max_run = 0L, return_normal = FALSE,                              vars = \"MAT\", out_spatial = FALSE) tempRas <- rast(dem_vancouver)  dwscl_Ras <- sapply(split(dwscl_out, by = c(\"GCM\", \"PERIOD\")) , function(DT, tempRas) {   tempRas[DT$id] <- DT$MAT   return(tempRas) }, tempRas = tempRas)  ## make a stack dwscl_Ras <- rast(dwscl_Ras)  dwscl_Ras #> class       : SpatRaster  #> dimensions  : 240, 480, 15  (nrow, ncol, nlyr) #> resolution  : 0.0008333333, 0.0008333333  (x, y) #> extent      : -123.2999, -122.8999, 49.29986, 49.49986  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory #> names       : ACCES~_2020, ACCES~_2040, ACCES~_2060, ACCES~_2080, ACCES~_2100, BCC-C~_2020, ...  #> min values  :    3.169988,    4.275773,    5.055683,     5.49157,    5.477979,    3.108685, ...  #> max values  :   11.823245,   12.932047,   13.707604,    14.14545,   14.133215,   11.745547, ..."},{"path":"https://bcgov.github.io/climr/articles/climr-with-rasters.html","id":"raster-without-elevation-values","dir":"Articles","previous_headings":"Spatial inputs and climr_downscale() > Raster inputs","what":"Raster without elevation values","title":"Working with rasters and other spatial objects","text":"raster DEM, need obtain elevation points extracted raster cells. can done extracting elevation values DEM raster first raster’s cell centroid coordinates. DEM’s resolution doesn’t need match first raster’s resolution. start raster biogeoclimatc zones North Vancouver use lower resolution DEM obtain elevation values. , clip land areas. Rasters used derive point locations (left) elevation values (right). process convert downscaled data raster format , used raster cell IDs point location IDs (xyzDT$id):","code":"## get point locations from raster of interest BECz_vancouver_ras <- get(data(\"BECz_vancouver_ras\")) |>   unwrap()  BECz_vancouver_ras <- mask(BECz_vancouver_ras, vancouver_poly)  ## raster to data.table and rename columns to climr standard xyzDT <- BECz_vancouver_ras |>   as.data.frame(., xy = TRUE, cell = TRUE) |>     as.data.table() setnames(xyzDT, c(\"id\", \"lon\", \"lat\", \"ZONE\"))  ## now extract elevation values at each cell centroid coordinate ## from a DEM raster dem_vancouver_lowres <- get(data(dem_vancouver_lowres)) |>   unwrap()  xyzDT$elev <- extract(dem_vancouver_lowres, xyzDT[, .(lon, lat)])[names(dem_vancouver_lowres)] par(mfrow = c(1,2)) plot(BECz_vancouver_ras, main = \"BGC zones N Vancouver\") plot(dem_vancouver_lowres, main = \"Low res. DEM\",      col = hcl.colors(100, \"Earth\")) par(mfrow = c(1,1)) dwscl_out <- climr_downscale(xyzDT, which_normal = \"auto\",                              gcm_models = list_gcm()[1:3],                              ssp = list_ssp()[1],                              gcm_period = list_gcm_period(),                              max_run = 0L, return_normal = FALSE,                              vars = \"MAT\", out_spatial = FALSE)  tempRas <- rast(BECz_vancouver_ras)  dwscl_Ras <- sapply(split(dwscl_out, by = c(\"GCM\", \"PERIOD\")) , function(DT, tempRas) {   tempRas[DT$id] <- DT$MAT   return(tempRas) }, tempRas = tempRas)  ## make a stack dwscl_Ras <- rast(dwscl_Ras)"},{"path":"https://bcgov.github.io/climr/articles/climr-with-rasters.html","id":"lowering-an-input-raster-resolution","dir":"Articles","previous_headings":"Spatial inputs and climr_downscale() > Raster inputs","what":"Lowering an input raster resolution","title":"Working with rasters and other spatial objects","text":"may want downscale climate coarser resolution , e.g., DEM raster layer hand: Points extracted raster , pass data.table point locations climr_downscale: Plot spatial outputs climr_downscale() using spaced point locations","code":"vancouver_poly <- get(data(\"vancouver_poly\")) |>   unwrap() dem_vancouver <- get(data(\"dem_vancouver\")) |>   unwrap()  dem_vancouver <- mask(dem_vancouver, vancouver_poly)  ## extract points at a coarser scale, but elevation at original scale lowRes_ras <- rast(dem_vancouver)  lowRes_ras <- project(lowRes_ras, crs(lowRes_ras), res = 0.01)   lowRes_ras[] <- 1 lowRes_ras <- mask(lowRes_ras, vancouver_poly) ## set water back to NA  lowRes_points <- as.points(lowRes_ras) lowRes_points$id <- 1:nrow(lowRes_points)  xyzDT <- extract(dem_vancouver, lowRes_points, xy = TRUE) |>   as.data.table() setnames(xyzDT, c(\"id\", \"elev\", \"lon\", \"lat\"))  ## exclude NAs xyzDT <- xyzDT[complete.cases(xyzDT)] lowRes_points <- lowRes_points[lowRes_points$id %in% xyzDT$id,] dwscl_out <- climr_downscale(xyzDT, which_normal = \"auto\",                                    gcm_models = list_gcm()[1:3],                                    ssp = list_ssp()[1],                                    gcm_period = list_gcm_period(),                                    max_run = 0L, return_normal = FALSE,                                    vars = \"MAT\", out_spatial = TRUE)"},{"path":[]},{"path":"https://bcgov.github.io/climr/articles/climr-with-rasters.html","id":"point-vector-data","dir":"Articles","previous_headings":"Spatial inputs and climr_downscale() > Vector inputs/outputs","what":"Point vector data","title":"Working with rasters and other spatial objects","text":"process similar . points elevation information simply need convert data.table. case, point IDs need added data.table afterwards. don’t elevation information, need obtain . example start set points North Vancouver, BC, Canada, get elevation values Digital Elevation Model (DEM) raster. terra::extract() function outputs data.frame point IDs, extracted values , optionally x/y coordinates. need simply use output create xyzDT table climr_downscale(). get point-type outputs simply set climr_downscale(..., out_spatial = TRUE). Plot spatial outputs climr_downscale()","code":"vancouver_points <- get(data(\"vancouver_points\")) |>   unwrap() dem_vancouver <- get(data(\"dem_vancouver\")) |>   unwrap()  xyzDT <- extract(dem_vancouver, vancouver_points, xy = TRUE) |>   as.data.table() setnames(xyzDT, c(\"id\", \"elev\", \"lon\", \"lat\"))  dwscl_out <- climr_downscale(xyzDT, which_normal = \"auto\",                              gcm_models = list_gcm()[1:3],                              ssp = list_ssp()[1],                              gcm_period = list_gcm_period(),                              vars = \"MAT\", max_run = 0L,                               return_normal = FALSE,                              out_spatial = TRUE) dwscl_out #>  class       : SpatVector  #>  geometry    : points  #>  dimensions  : 15000, 7  (geometries, attributes) #>  extent      : -123.2828, -122.9003, 49.30028, 49.49944  (xmin, xmax, ymin, ymax) #>  coord. ref. : +proj=longlat +datum=WGS84 +no_defs  #>  names       :  elev    id           GCM    SSP          RUN    PERIOD   MAT #>  type        : <num> <num>         <chr>  <chr>        <chr>     <chr> <num> #>  values      : 233.1     1 ACCESS-ESM1-5 ssp126 ensembleMean 2001_2020 10.54 #>                233.1     1 ACCESS-ESM1-5 ssp126 ensembleMean 2021_2040 11.65 #>                233.1     1 ACCESS-ESM1-5 ssp126 ensembleMean 2041_2060 12.42"},{"path":"https://bcgov.github.io/climr/articles/climr-with-rasters.html","id":"polygon-vector-data","dir":"Articles","previous_headings":"Spatial inputs and climr_downscale()","what":"Polygon vector data","title":"Working with rasters and other spatial objects","text":"assume polygon data refers area (several) want downscaled climate variables . polygon associated single value per attribute field, polygons need sampled/combined points downscaling happen. examples showed use polygon mask raster points dataset creating xyzDT table, way achieve . , show another example points derived polygon centroids.","code":""},{"path":"https://bcgov.github.io/climr/articles/climr-with-rasters.html","id":"using-polygon-centroids","dir":"Articles","previous_headings":"Spatial inputs and climr_downscale() > Polygon vector data","what":"using polygon centroids","title":"Working with rasters and other spatial objects","text":"advise unless polygons small centroid reflects overall polygon’s climate conditions. Excluded (grey) retained (orange) polygon centroids","code":"vancouver_poly <- get(data(\"vancouver_poly\")) |>   unwrap() dem_vancouver <- get(data(\"dem_vancouver\")) |>   unwrap()  centrds <- centroids(vancouver_poly, inside = TRUE)  ## get polygon areas and exclude very large polygon centroids centrds$area <- expanse(vancouver_poly) centrds <- centrds[centrds$area < 50000,]  ## we retained only 3 points  xyzDT <- extract(dem_vancouver, centrds, xy = TRUE) |>   as.data.table() setnames(xyzDT, c(\"id\", \"elev\", \"lon\", \"lat\"))  dwscl_outGrid <- climr_downscale(xyzDT, which_normal = \"auto\",                                  gcm_models = list_gcm()[1:3],                                  ssp = list_ssp()[1],                                  gcm_period = list_gcm_period(),                                  max_run = 0L, return_normal = FALSE,                                  vars = \"MAT\", out_spatial = TRUE)"},{"path":[]},{"path":"https://bcgov.github.io/climr/articles/climr_workflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"`climr` workflow - intermediate","text":"climr essence similar ClimateNA downscales low-resolution (~100km) global climate model anomalies high-resolution (1-4km) maps climate, elevation adjustment user-specified elevation grids/points based empirical lapse rates (local relationship climate elevation) 1-4km climate maps. elevation-adjusted monthly values basic climate elements (temperature precipitation) used estimate derived variables (e.g., degree-days, precipitation snow) based published equations parameters (Wang et al. 2016). See vignette(\"methods_downscaling.Rmd\") detailed explanation downscaling methodology employed climr. climr’s strenghts : ability obtain multiple, individual runs (several) General Circulation Model(s) (GCM), well ensemble cross-run mean, cloud-based raw data access local data caching, direct R interface downscaled climate elements derived variables covering western Canada western US. vignette cover two basic climr workflows obtain historic future climate projections derived variables. first, less code-heavy, workflow uses climr_downscale() much heavy lifting – [Workflow climr_downscale]. second workflow step--step breakdown climr_downscale() using functions climr_downscale() calls internally – [Workflow *_input functions downscale].","code":""},{"path":"https://bcgov.github.io/climr/articles/climr_workflow.html","id":"main-functions","dir":"Articles","previous_headings":"","what":"Main functions","title":"`climr` workflow - intermediate","text":"list main functions used two workflows. climr_downscale() takes data.table point coordinates (lat-long projection), obtains climate normals historic /future projections covering extent points, downscaled using point elevation data used calculate derived climate variables point locations. outputs downscaled derived variables form data.table SpatVector points. normal_input() downloads prepares high-resolution climate normals. Called internally climr_downscale(). historic_input() historic_input_ts() download prepare low-resolution historic climate elements given historic period time series, respectively. Called internally climr_downscale(). gcm_input(), gcm_hist_input() gcm_ts_input() download prepare low-resolution climate element projections future period, historic period future time series, respectively. Called internally climr_downscale(). downscale() downscales historic future climate elements calculates derived climate variables. Called climr_downscale().","code":""},{"path":"https://bcgov.github.io/climr/articles/climr_workflow.html","id":"workflow-with-climr_downscale","dir":"Articles","previous_headings":"","what":"Workflow with climr_downscale","title":"`climr` workflow - intermediate","text":"example workflow use climr_downscale() calculate mean annual temperature (MAT), total annual precipitation (PPT) precipitation snow (PAS) weather stations associated Adjusted homogenized Canadian climate data. downscale MAT, PPT MAS locations historic future period, using two separate runs GCM one emissions scenario. begin loading Adjusted Precipitation Canada (APC2) dataset clipping North Vancouver area. dataset already contains elevation information. Note longitude (‘lon’) latitude (‘lat’) must lat-long projection (EPSG:4326) elevation m. Point IDs must unique – use weather station IDs. also add two columns data.table (‘ZONE’ ‘HEZ’) ignored climr_downscale(). climr_downscale() preserves IDs use join back extra columns used plotting later . list_*() functions provide list available historic future periods, GCMs, emissions scenarios, derived variables (case annual ones). chose available historic period (2001-2020), 2021-2040 future period, ‘EC-Earth3’ GCM SSP 2.45 scenario. MAT, PPT PAS selected output variables. pass choices climr_downscale(), choosing “auto” normals option (defaults using highest resolution data available points selected). Note data historical periods doesn’t GCM SSP value – expected , GCMs SSPs used project future climate values. Also, future projections obtained two runs EC-Earth3 (‘r1i1p1f1’ ‘r10i1p1f1’), plus ensemble mean. ‘ds_out’ table - Output climr_downscale. Outputs show one location (‘id’) add back extra columns need simple left join. can now simple visualisation climate variation biogeoclimatic zone (‘ZONE’), normals period 1961-1990:  may also want yearly climate projections. case, want yearly values MAT PPT 2001-2015 2021:2040, using GCM, SSP number model runs. Notice data doesn’t need downloaded , retrieved cache. climr_downscale() internally rescales projected historical values align observed counterpart. See vignette(\"methods_downscaling.Rmd\") details. plot time series, filter data single model run (.e. case discard ensemble means) single point location. Note plot observed (obs_hist) projected historical (proj_hist) climate values along future climate projections (proj_fut). Time series outputs climr_downscale. Pannels show mean annual temperature (MAT), total annual precipitation (PPT) precipitation snow (PAS). Line colours refer observed historic values (grey), projected historic values (gren) future projected values (blue) single location, GCM, emissions scenario model run.","code":"library(climr) library(data.table) library(terra)  ## weather station locations ahccd_pstations <- get(data(\"ahccd_pstations\")) |>   unwrap()  ## study area of interest (North Vancouver) vancouver_poly <- get(data(\"vancouver_poly\")) |>   unwrap()  ## subset to points in study area ahccd_pstations <- mask(ahccd_pstations, vancouver_poly)  ## convert to data.table and subset/rename columns needed by climr xyzDT <- as.data.table(ahccd_pstations, geom = \"XY\") cols <- c(\"stnid\", \"x\", \"y\", \"elev (m)\") xyzDT <- xyzDT[, ..cols] setnames(xyzDT, c(\"id\", \"lon\", \"lat\", \"elev\"))  ## join BEC zones and colours BECz_vancouver <- get(data(\"BECz_vancouver\")) |>   unwrap()  BECz_points <- extract(BECz_vancouver, ahccd_pstations) |>   as.data.table() BECz_points <- BECz_points[, .(ZONE, HEX)]  xyzDT <- cbind(xyzDT, BECz_points) list_historic() #> [1] \"2001_2020\" list_gcm_period() #> [1] \"2001_2020\" \"2021_2040\" \"2041_2060\" \"2061_2080\" \"2081_2100\" list_gcm() #>  [1] \"ACCESS-ESM1-5\" \"BCC-CSM2-MR\"   \"CanESM5\"       \"CNRM-ESM2-1\"   #>  [5] \"EC-Earth3\"     \"GFDL-ESM4\"     \"GISS-E2-1-G\"   \"INM-CM5-0\"     #>  [9] \"IPSL-CM6A-LR\"  \"MIROC6\"        \"MPI-ESM1-2-HR\" \"MRI-ESM2-0\"    #> [13] \"UKESM1-0-LL\" list_ssp() #> [1] \"ssp126\" \"ssp245\" \"ssp370\" \"ssp585\" list_variables(set = \"Annual\") #>  [1] \"AHM\"   \"bFFP\"  \"CMD\"   \"CMI\"   \"DD_0\"  \"DD_18\" \"DD18\"  \"DD5\"   \"eFFP\"  #> [10] \"EMT\"   \"Eref\"  \"EXT\"   \"FFP\"   \"MAP\"   \"MAT\"   \"MCMT\"  \"MSP\"   \"MWMT\"  #> [19] \"NFFD\"  \"PAS\"   \"PPT\"   \"RH\"    \"SHM\"   \"Tave\"  \"TD\"    \"Tmax\"  \"Tmin\" ds_out <- climr_downscale(   xyz = xyzDT,   which_normal = \"auto\",   historic_period = \"2001_2020\",   gcm_period = \"2021_2040\",   gcm_models = \"EC-Earth3\",   ssp = \"ssp245\",   max_run = 2,   return_normal = TRUE, ## to return the 1961-1990 normals period   vars = c(\"MAT\", \"PPT\", \"PAS\") ) #> Welcome to climr! #> Getting normals... #> for BC... #> Downloading new data... #> . #> Caching data... #> Getting historic... #> Downloading historic anomalies #> . #> Caching data... #> Getting GCMs... #> Downloading GCM anomalies #> . #> Caching data... #> Downscaling!! ds_out <- xyzDT[, .(id, ZONE, HEX)][ds_out, on = .(id)] plotdata <- melt(ds_out, measure.vars = c(\"MAT\", \"PPT\", \"PAS\")) cols <- plotdata$HEX names(cols) <- plotdata$ZONE cols <- cols[!duplicated(cols)]  ggplot(plotdata[PERIOD == \"1961_1990\"], aes(x = ZONE, y = value, fill = ZONE)) +   geom_boxplot() +   theme_light() +    scale_fill_manual(values = cols) +   facet_wrap(~ variable, scales = \"free\") ds_out_ts <- climr_downscale(   xyz = xyzDT,   which_normal = \"auto\",   historic_ts = 2001:2015,      ## currently up to 2015   gcm_hist_years = 2001:2020,   ## currently up to 2010   gcm_ts_years = 2021:2040,     ## currently starting at 2021   gcm_models = \"EC-Earth3\",   ssp = \"ssp245\",   max_run = 1,   return_normal = TRUE, ## to return the 1961-1990 normals period   vars = c(\"MAT\", \"PPT\", \"PAS\") ) #> Welcome to climr! #> Getting normals... #> for BC... #> Retrieving from cache... #> Downloading historic anomalies #> . #> Caching data... #> Downloading GCM anomalies #> Precip... #> . #> Tmax... #> . #> Tmin... #> . #> Caching data... #> Downloading GCM anomalies #> . #> Caching data... #> Downscaling!! ds_out_ts[is.na(GCM), GCM := \"Historic\"] ds_out_ts <- ds_out_ts[!grepl(\"ensemble\", RUN)] ds_out_ts <- ds_out_ts[!grepl(\"1961_1990\", PERIOD)]  plotdata <- melt(ds_out_ts, measure.vars = c(\"MAT\", \"PPT\", \"PAS\")) plotdata[, PERIOD := as.numeric(PERIOD)] plotdata <- plotdata[id == head(id,1)]  ## time series period groupings plotdata[GCM == \"Historic\",  pgrp := \"obs_hist\"] plotdata[GCM != \"Historic\" & PERIOD <= 2020,  pgrp := \"proj_hist\"] plotdata[GCM != \"Historic\" & PERIOD > 2020,  pgrp := \"proj_fut\"]  ## make groups so that missing data is not shown as a \"line connection\" groups <- data.table(PERIOD = unique(plotdata$PERIOD)) groups[, idx := c(1, diff(PERIOD))] i2 <- c(1, which(groups$idx != 1), nrow(groups) + 1) groups[, grp := rep(1:length(diff(i2)), diff(i2))] plotdata <- groups[, .(PERIOD, grp)][plotdata, on = \"PERIOD\"] plotdata[, grp := paste(grp, variable, sep = \"_\")]  yrbreaks <- c(   min(plotdata$PERIOD),   seq(min(plotdata$PERIOD), max(plotdata$PERIOD), by = 5),   max(plotdata$PERIOD) ) |>   unique()  ggplot(plotdata, aes(x = PERIOD, y = value, col = pgrp, group = grp)) +   geom_line(data = plotdata[pgrp == \"obs_hist\"], size = 1.1,              linejoin = \"round\", lineend = \"round\") +   geom_line(data = plotdata[pgrp != \"obs_hist\"], size = 1.1,              linejoin = \"round\", lineend = \"round\") +   scale_x_continuous(breaks = yrbreaks, labels = yrbreaks) +   scale_color_manual(values = c(\"obs_hist\" = \"grey\",                                 \"proj_hist\" =  \"forestgreen\",                                  \"proj_fut\" = \"navyblue\"),                      breaks = c(\"obs_hist\", \"proj_hist\", \"proj_fut\")) +   theme_light() +   theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) +   labs(x = \"Year\", col = \"\") +   facet_wrap(~ variable, scales = \"free\", ncol = 1, strip.position = \"left\", )"},{"path":"https://bcgov.github.io/climr/articles/climr_workflow.html","id":"spatial-output-and-plotting-options","dir":"Articles","previous_headings":"Workflow with climr_downscale","what":"Spatial output and plotting options","title":"`climr` workflow - intermediate","text":"climr_downscale can also provide outputs form SpatVector points plot values chosen climate variable list passed climr_downscale(..., vars), case MAT.  course can now use vector output map variables top DEM raster, prettier visuals:","code":"ds_out_spatial <- climr_downscale(   xyz = xyzDT,   which_normal = \"auto\",   gcm_models = \"EC-Earth3\",    gcm_period = \"2021_2040\",   ssp = \"ssp245\",   max_run = 0,   return_normal = FALSE, ## don't return the 1961-1990 normals period   out_spatial = TRUE,   plot = \"MAT\",   vars = c(\"MAT\", \"PPT\", \"PAS\") ) vancouver <- get(data(\"vancouver\")) |>   unwrap()  par(mfrow = c(1,2)) plot(vancouver_poly, col = hcl.colors(50, palette = \"Earth\"),      plg = list(x = \"bottom\", title = \"Elevation\"),       mar = c(4, 1, 1, 4)) plot(vancouver, add = TRUE, col = \"black\") plot(ds_out_spatial, \"MAT\", col = hcl.colors(50, palette = \"Reds\"),      add = TRUE, type = \"continuous\",      plg = list(x = \"right\", title = \"MAT\"))  plot(vancouver_poly, col = hcl.colors(50, palette = \"Earth\"),      plg = list(x = \"bottom\", title = \"Elevation\"),       mar = c(4, 1, 1, 4)) plot(vancouver, add = TRUE, col = \"black\") plot(ds_out_spatial, \"PPT\", col = hcl.colors(50, palette = \"Blues\"),      add = TRUE, type = \"continuous\",      plg = list(x = \"right\", title = \"PPT\"))"},{"path":"https://bcgov.github.io/climr/articles/climr_workflow.html","id":"workflow-with-_input-functions-and-downscale","dir":"Articles","previous_headings":"","what":"Workflow with *_input functions and downscale","title":"`climr` workflow - intermediate","text":"Alternatively, user may choose run climate data preparation downscaling functions separately. suggest least twice full understanding steps climr_downscale executes internally. Steps 1 2 bellow download prepare climate data used downscaling step (Step 3). use point locations downscaling.","code":""},{"path":"https://bcgov.github.io/climr/articles/climr_workflow.html","id":"get-climate-normals---normal_input","dir":"Articles","previous_headings":"Workflow with *_input functions and downscale","what":"1) Get climate normals - normal_input()","title":"`climr` workflow - intermediate","text":"using normal_input(), establish connection PostGIS server pass bounding box containing point locations interest. “auto” option select source climate normals. list_normal() provides list available options: ‘normal_na’ corresponds normals North America obtained ClimateNA (Wang et al. 2016); ‘normal_bc’ corresponds British Columbia PRISM normals; ‘normal_composite’ corresponds composite British Columbia PRISM, adjusted US PRISM DAYMET (Alberta Saskatchewan), covers western Canada western US. use ‘normal_composite’ highest resolution product area interest. extent downloaded climate anomalies often larger extent bounding box, vary depending spatial resolution data. demonstrate define bounding box set coordinates. Alternatively, get_bb used extract bounding box around point locations xyzDT. Downloaded normals shown North Vancouver area requested bounding box.","code":"list_normal() #> [1] \"normal_na\"        \"normal_bc\"        \"normal_composite\" dbCon <- data_connect() the_bb <- c(50, 49, -122, -124)  ## alternatively: # the_bb <- get_bb(xyzDT)  normals <- normal_input(dbCon, bbox = the_bb,                          normal = \"normal_composite\") #> ."},{"path":"https://bcgov.github.io/climr/articles/climr_workflow.html","id":"get-climate-projections-andor-historical-observations","dir":"Articles","previous_headings":"Workflow with *_input functions and downscale","what":"2) Get climate projections and/or historical observations","title":"`climr` workflow - intermediate","text":"Data historic future climate projections can obtained gcm_*() functions. gcm_hist_input() used obtain historical anomalies projected (several) GCM, whereas gcm_input() gcm_ts_input used obtain future anomaly projections period individual years (.e. time series). Historical observations given period individual years can obtained historic_input historic_input_ts, respectively. Downloaded historical future anomalies shown North Vancouver area requested bounding box.","code":"hist_proj <- gcm_hist_input(dbCon, bbox = the_bb,                              gcm = \"EC-Earth3\",                             years = 2001:2020,                             max_run = 0) #> .  fut_proj <- gcm_input(dbCon, bbox = the_bb,                        gcm = \"EC-Earth3\",                       ssp = \"ssp245\",                        period = \"2021_2040\",                       max_run = 0) #> .  fut_proj_ts <- gcm_ts_input(dbCon, bbox = the_bb,                              gcm = \"EC-Earth3\",                             ssp = \"ssp245\",                              years = 2021:2040,                             max_run = 0) #> ...  hist_obs <- historic_input(dbCon, bbox = the_bb,                            period = \"2001_2020\") hist_obs_ts <- historic_input_ts(dbCon, bbox = the_bb,                                  years = 2001:2020) #> ."},{"path":"https://bcgov.github.io/climr/articles/climr_workflow.html","id":"downscale-and-calculate-actual-values-i-e--not-anomalies","dir":"Articles","previous_headings":"Workflow with *_input functions and downscale","what":"3) Downscale and calculate actual values (i.e., not anomalies)","title":"`climr` workflow - intermediate","text":"Now necessary inputs, can downscale climate data. avoid repeating lines code input, ’ll use lapply() .call() iterate several climate inputs downscale. Note .call() work, list climate inputs (inputs) must named according downscale()’s argument names (can list formalArgs(downscale)). Binding tables results similar table one achieved used climr_downscale(). ‘all_downscale’ table binding. Outputs show one location (‘id’)","code":"inputs <- list(\"gcm\" = fut_proj,                \"historic\" = hist_obs,                \"gcm_ts\" = fut_proj_ts,                \"gcm_hist\" = hist_proj,                \"historic_ts\" = hist_obs_ts)  all_downscale <- sapply(names(inputs),                          function(input_arg, xyzDT, normals, inputs) {                           args <- list(inputs[[input_arg]])                           names(args) <- input_arg                                                      ## add a few more arguments                           args <- append(args,                                           list(\"xyz\" = xyzDT,                                               \"normal\" = normals,                                               \"return_normal\" = FALSE,                                                \"vars\" = \"MAT\",                                                \"out_spatial\" = FALSE))                                                      return(do.call(downscale, args))                         }, normals = normals, inputs = inputs, xyzDT)  all_downscale #> $gcm #> Key: <id, GCM, SSP, RUN, PERIOD> #>         id       GCM    SSP          RUN    PERIOD      MAT #>     <char>    <char> <char>       <char>    <char>    <num> #> 1: 1107200 EC-Earth3 ssp245 ensembleMean 2021_2040 10.49776 #>  #> $historic #> Key: <id, PERIOD> #>         id    PERIOD      MAT #>     <char>    <char>    <num> #> 1: 1107200 2001_2020 9.278909 #>  #> $gcm_ts #> Key: <id, GCM, SSP, RUN, PERIOD> #>          id       GCM    SSP          RUN PERIOD      MAT #>      <char>    <char> <char>       <char> <char>    <num> #>  1: 1107200 EC-Earth3 ssp245 ensembleMean   2021 10.21944 #>  2: 1107200 EC-Earth3 ssp245 ensembleMean   2022 10.78162 #>  3: 1107200 EC-Earth3 ssp245 ensembleMean   2023 10.29793 #>  4: 1107200 EC-Earth3 ssp245 ensembleMean   2024 10.03347 #>  5: 1107200 EC-Earth3 ssp245 ensembleMean   2025 10.58202 #> ---                                                       #> 16: 1107200 EC-Earth3 ssp245 ensembleMean   2036 10.64900 #> 17: 1107200 EC-Earth3 ssp245 ensembleMean   2037 10.54664 #> 18: 1107200 EC-Earth3 ssp245 ensembleMean   2038 10.23852 #> 19: 1107200 EC-Earth3 ssp245 ensembleMean   2039 11.19443 #> 20: 1107200 EC-Earth3 ssp245 ensembleMean   2040 10.38170 #>  #> $gcm_hist #> Key: <id, GCM, RUN, PERIOD> #>          id       GCM          RUN PERIOD       MAT #>      <char>    <char>       <char> <char>     <num> #>  1: 1107200 EC-Earth3 ensembleMean   2001  9.634387 #>  2: 1107200 EC-Earth3 ensembleMean   2002  9.662966 #>  3: 1107200 EC-Earth3 ensembleMean   2003 10.205079 #>  4: 1107200 EC-Earth3 ensembleMean   2004  9.991555 #>  5: 1107200 EC-Earth3 ensembleMean   2005 10.186652 #>  6: 1107200 EC-Earth3 ensembleMean   2006  9.500120 #>  7: 1107200 EC-Earth3 ensembleMean   2007  9.948473 #>  8: 1107200 EC-Earth3 ensembleMean   2008  9.539201 #>  9: 1107200 EC-Earth3 ensembleMean   2009  9.660453 #> 10: 1107200 EC-Earth3 ensembleMean   2010 10.650505 #>  #> $historic_ts #> Key: <id, PERIOD> #>          id PERIOD       MAT #>      <char> <char>     <num> #>  1: 1107200   2001  9.471878 #>  2: 1107200   2002  9.602541 #>  3: 1107200   2003 10.072453 #>  4: 1107200   2004 10.536369 #>  5: 1107200   2005 10.117817 #> ---                          #> 16: 1107200   2016 10.627231 #> 17: 1107200   2017  9.823179 #> 18: 1107200   2018 10.223968 #> 19: 1107200   2019  9.952119 #> 20: 1107200   2020 10.081163 all_downscale <- rbindlist(all_downscale, use.names = TRUE, fill = TRUE)"},{"path":[]},{"path":"https://bcgov.github.io/climr/articles/lapse_rates.html","id":"lapse-rates-calculation","dir":"Articles","previous_headings":"","what":"Lapse rates calculation","title":"Lapse rates","text":"Wang (2016) Climate North America algorithms retrieve monthly climate data elevation values location corresponding grid cell plus eight surrounding cells. climate elevation values nine cells used calculate differences climate variable elevation 36 possible pairs. simple linear regression differences climate variable difference elevation established, slope regression used empirical lapse rate climate variable specific location. local regressions dynamically developed along locations inquiry, call downscaling method “dynamic local downscaling” approach. avoid -adjustments due weak linear relationship, lapse rate weighted R-square value local linear regression. way done package, precompute lapse rates 36 variables store associated normal.","code":""},{"path":"https://bcgov.github.io/climr/articles/lapse_rates.html","id":"computation-details","dir":"Articles","previous_headings":"","what":"Computation details","title":"Lapse rates","text":"Starting equal extent digital elevation model raster (x) 36 climate variables rasters (pre delta method y’s). first convert rasters matrices way easier handle type operation. Base matrix , since want compute everything one swell swoop, create border extended matrices handle lapse rates values edge raster. Starting sides corners Next step sample extended matrices 8 times compute differences original matrices. going give us stack 8 matrices 36 variables used compute linear regression coefficients. North-west sample North sample North-east sample East sample South-east sample South sample South-west sample West sample Regresssion coefficients computed using following methods R² adjustment applied. example using two starting matrices Start extending matrices Sample 8 times Now compute relevant coefficients","code":"#' Simple linear regression without the intercept term #' beta_coef = sum(xy) / sum(x²) #' mss = sum(x * beta_coef)², sum of squared fitted values #' rss = sum(ε²), sum of squared (y minus fitted), sum of absolute errors #' R² = mss / (mss + rss) #' Lapse rate = beta_coef * R² (dem <- matrix(sample(0:1000, 25), nrow = 5)) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   84  507  882  255  579 #> [2,]  983  505  609  150  445 #> [3,]  521  701  748  162  447 #> [4,]  764  614  114   76  858 #> [5,]  381  467  934  115  665 (tmax <- matrix(30 - (dem / 50) %/% 1, nrow = 5)) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   29   20   13   25   19 #> [2,]   11   20   18   27   22 #> [3,]   20   16   16   27   22 #> [4,]   15   18   28   29   13 #> [5,]   23   21   12   28   17 dem_ext <- climr:::recycle_borders(dem, 5, 5) #> Downloading and Caching ESM run info :) (tmax_ext <- climr:::recycle_borders(tmax, 5, 5)) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]   29   29   20   13   25   19   19 #> [2,]   29   29   20   13   25   19   19 #> [3,]   11   11   20   18   27   22   22 #> [4,]   20   20   16   16   27   22   22 #> [5,]   15   15   18   28   29   13   13 #> [6,]   23   23   21   12   28   17   17 #> [7,]   23   23   21   12   28   17   17 dem_d <- climr:::deltas(dem_ext, 5, 5) (tmax_d <- climr:::deltas(tmax_ext, 5, 5)) #> $northwest #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    9    7  -12    6 #> [2,]   18    9    2  -14    3 #> [3,]   -9   -5    4   -9    5 #> [4,]    5    2  -12  -13   14 #> [5,]   -8   -6    6    0   12 #>  #> $north #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]   18    0   -5   -2   -3 #> [3,]   -9    4    2    0    0 #> [4,]    5   -2  -12   -2    9 #> [5,]   -8   -3   16    1   -4 #>  #> $northeast #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   -9   -7   12   -6    0 #> [2,]    9   -7    7   -8   -3 #> [3,]    0    2   11   -5    0 #> [4,]    1   -2   -1   -7    9 #> [5,]   -5    7   17  -15   -4 #>  #> $east #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   -9   -7   12   -6    0 #> [2,]    9   -2    9   -5    0 #> [3,]   -4    0   11   -5    0 #> [4,]    3   10    1  -16    0 #> [5,]   -2   -9   16  -11    0 #>  #> $southeast #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   -9   -2   14   -3    3 #> [2,]    5   -4    9   -5    0 #> [3,]   -2   12   13  -14   -9 #> [4,]    6   -6    0  -12    4 #> [5,]   -2   -9   16  -11    0 #>  #> $south #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  -18    0    5    2    3 #> [2,]    9   -4   -2    0    0 #> [3,]   -5    2   12    2   -9 #> [4,]    8    3  -16   -1    4 #> [5,]    0    0    0    0    0 #>  #> $southwest #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  -18   -9    7   -7    8 #> [2,]    9    0   -2  -11    5 #> [3,]   -5   -1    2    1    7 #> [4,]    8    5   -7  -17   15 #> [5,]    0    2    9  -16   11 #>  #> $west #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    9    7  -12    6 #> [2,]    0   -9    2   -9    5 #> [3,]    0    4    0  -11    5 #> [4,]    0   -3  -10   -1   16 #> [5,]    0    2    9  -16   11 # Number of surrounding cells n <- length(dem_d) # Sums of x squared sum_xx <- climr:::sum_matrix(   climr:::sup(dem_d, 2) ) beta_coef <- climr:::sum_matrix(   climr:::prod_matrix(dem_d, tmax_d) ) / sum_xx # We need the fitted values to compute the # coefficient of determination f <- climr:::fitted(dem_d, beta_coef) # We use the same approach as stats::summary.lm # applied to a list matrices mss <- climr:::sum_matrix(   climr:::sup(f, 2) ) rss <- climr:::sum_matrix(   climr:::sup(     climr:::delta_matrix(tmax_d, f),     2   ) ) # We can combine the resulting matrices to get the # coefficient of determination and multiply by beta coficient (lapse_rate <- beta_coef * mss / (mss + rss)) #>             [,1]        [,2]        [,3]        [,4]        [,5] #> [1,] -0.02032729 -0.01973014 -0.01898027 -0.01896813 -0.01883840 #> [2,] -0.01964212 -0.01922065 -0.01946335 -0.01865606 -0.01760671 #> [3,] -0.01983750 -0.01990969 -0.01862179 -0.01936336 -0.01979772 #> [4,] -0.02061463 -0.01971922 -0.01964157 -0.01992438 -0.02053305 #> [5,] -0.02105837 -0.01959283 -0.01953142 -0.01979095 -0.02017625"},{"path":"https://bcgov.github.io/climr/articles/methods_downscaling.html","id":"stage-1-change-factor-aka-delta-downscaling","dir":"Articles","previous_headings":"","what":"Stage 1: change-factor (aka “delta”) downscaling","title":"`climr` downscaling methods","text":"climr uses simple method called change-factor downscaling. method sometimes referred climate imprint method (Hunter Meentemeyer 2005), delta method (Wang et al. 2016), simple mean bias correction (Maraun 2016). method adds low-spatial-resolution anomalies (e.g., climate model) high-resolution gridded climate map (Tabor Williams 2010). change-factor downscaling simplistic downscaling daily time series extremes indices, sufficient downscaling temperature precipitation data low temporal resolution (e.g., 20-year climate averages). default high-resolution climate maps used climr 800m gridded maps mean daily maximum temperature (Tmax), mean daily minimum temperature (Tmin), precipitation (PPT) 1961-1990 period. climr uses custom composite climate maps multiple sources: PRISM Climate Group (USA), Pacific Climate Impacts Consortium (BC), Daymet (Mexico Canada outside BC). one map month year, total 36 climate maps. July Tmax reference map looks like vicinity Vancouver, BC. climr 1961-1990 reference climate map July Tmax Global climate model data much lower resolution (60-200km grid scale). change July Tmax EC-Earth3 global climate model 2041-2060 time period, relative model’s 1961-1990 climate. case, warming greater areas (eastward) coast. Low-resolution anomalies (change) July Tmax EC-Earth3 global climate model 2041-2060 time period, relative model’s 1961-1990 climate downscale GCM projection, first interpolate low-resolution GCM anomaly (case, temperature change 1961-1990 2041-2060) resolution detailed reference climate map: Interpolation low-resolution climate model anomalies high resolution reference climate map. add smoothed anomalies high-resolution 1961-1990 climate map, resulting high-resolution map simulated climate 2041-2060. Downscaled 2041-2060 July Tmax EC-Earth model, resulting addition interpolated low-resolution model anomalies (change factors) high resolution 1961-1990 reference climate. case precipitation, multiply reference climate relative anomaly (e.g., multiply 1.07 7% increase precipitation), rather adding absolute anomaly. example illustrates change-factor downscaling able represent effect ocean reducing warming rates coastal areas, large-scale effect represented coarse resolution global climate model. However, downscaling produced uniform warming rate valley bottom mountain top. reality, expect large elevation-dependent differences warming rate due example changes snowpack. inability represent changes occur spatial scales smaller (large) global climate model grid cells important weakness change-factor downscaling statistical downscaling methods. Similarly, change-factor downscaling can’t represent role fine-scale features like lakes, vegetation, cold-air pooling, soil moisture. important considerations interpreting results statistical downscaling.","code":""},{"path":"https://bcgov.github.io/climr/articles/methods_downscaling.html","id":"stage-2-elevation-adjustment","dir":"Articles","previous_headings":"","what":"Stage 2: Elevation adjustment","title":"`climr` downscaling methods","text":"climr uses elevation adjustment downscale temperature variables scales finer resolution reference climate map. inferring relationship temperature elevation, known lapse rate, reference climate maps. local lapse rate calculated grid cell reference climate map using linear regression temperature elevation among focal cell 8 neighbours. gridded lapse rates included SpatRaster returned normal_input() function used . climr lapse rate layer July Tmax: July Tmax lapse rates (change temperature relative elevation; oC/m) used elevation adjustment example indicates BC PRISM maps July Tmax lower lapse rates maritime influenced mountains (4oC/km) mountains less maritime influence (8oC/km). map lapse rates artefacts areas relief; artefacts consequence unless users supply elevations areas deviate substantially realistic ground elevations areas flat topography (e.g., asking climr provide climate values 200m elevation Fraser River delta, uniformly sea level). can use climr_downscale() function 90m digital elevation model (DEM) illustrate elevation adjustment Vancouver’s north shore mountains, shown . 1961-1990 July Tmax 800m reference clmate map (left) elevation-adjusted 90m grid (right). Elevation adjustment provides visually appealing map can useful improving precision climate values points interest areas steep topography. However, important remember climr output represents effects regional climate elevation. Microclimatic factors aspect, vegetation, water bodies, frost pooling, soil moisture represented maps. default, climr doesn’t apply elevation adjustment precipitation, cases elevation influence precipitation scales less 1km. Instead, precipitation scales finer 800m simply interpolated nearest four grid points reference map. Users can choose apply elevation-adjustment precipitation selecting ppt_lr = TRUE downscale() function.","code":""},{"path":"https://bcgov.github.io/climr/articles/methods_downscaling.html","id":"stage-3-derived-variables","dir":"Articles","previous_headings":"","what":"Stage 3: Derived variables","title":"`climr` downscaling methods","text":"value delta downscaling isn’t just obtaining new absolute values temperature precipitation. allows us calculate anomalies indices don’t scale linearly temperature precipitation, degree-days precipitation snow. climr currently uses ClimateNA derived variable equations (Wang et al. 2016). equations developed fitting non-linear models relationship variable interest calculated daily weather station data monthly temperature /precipitation weather stations. example, equations January degree-days 0oC 18oC derived fitting piecewise function variables January mean temperature 1961-1990 period 4891 stations across North America, shown Figure 4 Wang et al. (2016): Figure 4 Wang et al. (2016), illustrating derivation equations January degree-days 0oC 18oC based January mean temperature North American weather stations Using climr output EC-Earth3 climate model, can compare change January mean temperature change January degree days 0oC 2041-2060 period relative 1961-1990 baseline. January mean temperature interpolated directly GCM, variation climate change trend variable transition one GCM grid cell neighbours. contrast, January degree-days 0oC, derived directly January mean temperature, strong elevation-dependence climate change trend. Downscaled change January mean temperature (left) derived variable January degree days 0oC (right), using EC-Earth model simulation 2041-2060.","code":""},{"path":[]},{"path":"https://bcgov.github.io/climr/articles/methods_downscaling.html","id":"high-resolution-climate-maps-used-by-climr","dir":"Articles","previous_headings":"climr data sources","what":"High-resolution climate maps used by climr","title":"`climr` downscaling methods","text":"default climate maps climr composite western North America south 60oN (800m grid scale). compiled composite PRISM Climate Group (USA), Pacific Climate Impacts Consortium (BC), Daymet (Canada outside BC). recommend reference climate map following reasons: (1) 800m resolution preserves localized lapse rates (e.g. temperature inversions) averaged 4km ClimateNA composite; (2) PRISM climatology BC preserved blending outwards BC border; (3) lapse rates Alberta Rockies better defined; (4) Tmin Washington, Idaho, Montana reconstructed correct unrealistic lapse rates. climr provides two options high-resolution reference climate map: ClimateNA composite North America, 4km grid scale (Wang et al. 2016). composite compiled separate PRISM climate surfaces BC, Alaska, Yukon/Alberta/Saskatchewan/Manitoba, contiguous US, WorldClim (Fick Hijmans 2017) remainder continent. User-supplied climate maps. downscale() function can accept climate map reference normals. allows user provide reference climate maps, : (1) Alternative publicly available gridded climatologies CHELSA, Daymet, Worldclim; (2) output weather models (e.g., WRF); (3) custom super-high resolution climate maps small study areas.","code":""},{"path":"https://bcgov.github.io/climr/articles/methods_downscaling.html","id":"historical-observational-time-series-and-climates","dir":"Articles","previous_headings":"climr data sources","what":"Historical observational time series and climates","title":"`climr` downscaling methods","text":"climr provides historical observed climates annual time series 1901-present 10-year, 20-year, 30-year periods 1951-2020. downscaled way global climate model data: adding low-resolution anomalies (change factors) high-resolution reference climate map. Temperature anomalies Climatic Research Unit (CRU) Time Series dataset. Precipitation anomalies Global Precipitation Climatology Centre global dataset, better representation Canadian precipitation stations CRU Time Series dataset.","code":""},{"path":[]},{"path":"https://bcgov.github.io/climr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kiri Daust. Author. Colin Mahony. Author, maintainer. Bruno Tremblay. Author. Ceres Barros. Author. Francois Bornais. Author. Province British Columbia. Copyright holder, funder.","code":""},{"path":"https://bcgov.github.io/climr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Daust K, Mahony C, Tremblay B, Barros C, Bornais F (2024). climr: Downscaling global climate data. R package version 0.0.1.9007.","code":"@Manual{,   title = {climr: Downscaling of global climate data},   author = {Kiri Daust and Colin Mahony and Bruno Tremblay and Ceres Barros and Francois Bornais},   year = {2024},   note = {R package version 0.0.1.9007}, }"},{"path":"https://bcgov.github.io/climr/index.html","id":"climr-an-r-package-of-downscaled-climate-data-for-north-america","dir":"","previous_headings":"","what":"Downscaling of global climate data","title":"Downscaling of global climate data","text":"Copyright 2023 Province British Columbia Licensed Apache License, Version 2.0 (“License”); may use file except compliance License. may obtain copy License http://www.apache.org/licenses/LICENSE-2.0 Unless required applicable law agreed writing, software distributed License distributed “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied. See License specific language governing permissions limitations License.","code":""},{"path":"https://bcgov.github.io/climr/index.html","id":"about-climr","dir":"","previous_headings":"","what":"About climr","title":"Downscaling of global climate data","text":"climr experimental R package builds downscaling concepts operationalized ClimateNA tool (Wang et al. 2016). provides downscaling observational simulated climate data using change-factor (.k.. climate imprint) downscaling, simple method adds low-spatial-resolution climate anomalies high-spatial-resolution reference climatological map, additional elevation adjustment “scale-free” downscaling. climr designed fast minimize local data storage requirements. , uses remote PostGIS database, optionally caches data locally.","code":""},{"path":"https://bcgov.github.io/climr/index.html","id":"features","dir":"","previous_headings":"About climr","what":"Features","title":"Downscaling of global climate data","text":"climr provides following data: Historical observational time series (1902-2022), currently limited ClimateNA time series (Wang et al., 2016) Multiple historical (1851-2014) future (2015-2100) climate model simulations 13 CMIP6 global climate models, monthly time series 20-year normals User selection single multiple climate variables, derived variables following ClimateNA methodology Wang et al. (2016).","code":""},{"path":"https://bcgov.github.io/climr/index.html","id":"data-sources","dir":"","previous_headings":"About climr","what":"Data Sources","title":"Downscaling of global climate data","text":"reference climatologies British Columbia BC PRISM maps provided Pacific Climate Impacts Consortium. Reference climatologies North America ClimateNA (Wang et al. 2016) mosaics PRISM (BC, US) WorldClim (rest North America). ClimateNA mosaics accessed AdaptWest. Historical observational time series derived using ClimateNA (Wang et al. 2016). CMIP6 global climate model data downloaded subsetted North America Tongli Wang, Associate Professor UBC Department Forest Conservation Sciences. 13 global climate models selected climr, best practices ensemble analysis, described Mahony et al. (2022).","code":""},{"path":"https://bcgov.github.io/climr/index.html","id":"references","dir":"","previous_headings":"About climr","what":"References","title":"Downscaling of global climate data","text":"Mahony, C.R., T. Wang, . Hamann, .J. Cannon. 2022. global climate model ensemble downscaled monthly climate normals North America. International Journal Climatology. 42:5871-5891. doi.org/10.1002/joc.7566 Wang T., . Hamann, D. Spittlehouse, C. Carroll. 2016. Locally Downscaled Spatially Customizable Climate Data Historical Future Periods North America. PLoS ONE. e0156720. doi.org/10.1371/journal.pone.0156720","code":""},{"path":"https://bcgov.github.io/climr/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Downscaling of global climate data","text":"want install development version:","code":"remotes::install_github(\"bcgov/climr\") remotes::install_github(\"bcgov/climr@devl\")"},{"path":"https://bcgov.github.io/climr/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"Downscaling of global climate data","text":"","code":"##provide or create a long, lat, elev dataframe in_xyz <- structure(list(lon = c(-127.70521, -127.62279, -127.56235, -127.7162,                                    -127.18585, -127.1254, -126.94957, -126.95507),                           lat = c(55.3557, 55.38847, 55.28537, 55.25721, 54.88135, 54.65636, 54.6913, 54.61025),                           elev = c(291L, 296L, 626L, 377L, 424L, 591L, 723L, 633L)),                          id = 1:8,                          row.names = c(NA, -8L), class = \"data.frame\")  ##if you just want to downscale points and not think about what happening behind the scenes, use this function  res <- climr_downscale(xyz = in_xyz, which_normal = \"auto\",                         gcm_models = c(\"ACCESS-ESM1-5\", \"EC-Earth3\"),                         ssp = c(\"ssp370\",\"ssp245\"),                         gcm_period = c(\"2021_2040\", \"2041_2060\",\"2061_2080\"),                        #gcm_ts_years = 2020:2060,                        max_run = 3, # we want 3 individual runs for each model                        vars = c(\"PPT\",\"CMD\",\"CMI\"))                         ##Functions to show what data are available:  list_gcm() list_gcm_period() list_ssp() list_variables()                          ## Otherwise, you can download and investigate the normals and annomalies##################### dbCon <- data_connect() thebb <- get_bb(in_xyz) ##get bounding box based on input points normal <- normal_input(dbCon = dbCon, bbox = thebb, cache = TRUE) ##get normal data and lapse rates plot(normal[[1]])  ##get GCM anomolies (20 yr periods) gcm <- gcm_input(dbCon, bbox = thebb, gcm = c(\"ACCESS-ESM1-5\", \"EC-Earth3\"),                           ssp = c(\"ssp370\"),                           period = c(\"2021_2040\",\"2041_2060\",\"2061_2080\"),                          max_run = 0,                          cache = TRUE) plot(gcm[[2]][[1]])  ##get GCM anomolies (time series) - note that for multiple runs, this can take a bit to download the data gcm_ts <- gcm_ts_input(dbCon, bbox = thebb, gcm = c(\"ACCESS-ESM1-5\", \"EC-Earth3\"),                           ssp = c(\"ssp370\"),                           years = 2020:2080,                          max_run = 0,                          cache = TRUE) plot(gcm_ts[[2]][[1]])  # Downscale! results <- downscale(   xyz = in_xyz,   normal = normal,   gcm = gcm,   gcm_ts = gcm_ts,   vars = sprintf(c(\"Tmax%02d\"),1:12) )"},{"path":"https://bcgov.github.io/climr/index.html","id":"adding--modifying-climate-variables","dir":"","previous_headings":"Example Usage","what":"Adding / Modifying climate variables","title":"Downscaling of global climate data","text":"climate variables computed via R/append_clim_vars.R. Add modify entries variables list needed. Use function v handle dependencies (.e. v(\"Tmin\") instead dt$Tmin / dt[[\"Tmin\"]]).","code":""},{"path":"https://bcgov.github.io/climr/index.html","id":"lapse-rates-details","dir":"","previous_headings":"Example Usage","what":"Lapse rates details","title":"Downscaling of global climate data","text":"See lapse rates article vignettes folder details.","code":""},{"path":"https://bcgov.github.io/climr/index.html","id":"use-of-terra-package","dir":"","previous_headings":"Example Usage","what":"Use of terra package","title":"Downscaling of global climate data","text":"Instead implementing custom algorithms bilinear interpolation raster manipulation, package use terra. Long term, benefit performance improvement terra. terra replacement raster package. Data pivot using data.table dcast resource expensive operation downscale function according profiling using profvis.","code":""},{"path":"https://bcgov.github.io/climr/reference/BECcols.html","id":null,"dir":"Reference","previous_headings":"","what":"Colour sscheme for Biogeoclimatic Ecological Classification Zones — BECcols","title":"Colour sscheme for Biogeoclimatic Ecological Classification Zones — BECcols","text":"data.table RGB HEX colours biogeoclimatic zones BC.","code":""},{"path":"https://bcgov.github.io/climr/reference/BECcols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colour sscheme for Biogeoclimatic Ecological Classification Zones — BECcols","text":"","code":"BECcols"},{"path":"https://bcgov.github.io/climr/reference/BECcols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Colour sscheme for Biogeoclimatic Ecological Classification Zones — BECcols","text":"data.table","code":""},{"path":"https://bcgov.github.io/climr/reference/BECcols.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Colour sscheme for Biogeoclimatic Ecological Classification Zones — BECcols","text":"colour scheme commonly used BC provincial government.","code":""},{"path":"https://bcgov.github.io/climr/reference/BECz_vancouver.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Biogeoclimatic Ecological Classification Zones — BECz_vancouver","title":"Example Biogeoclimatic Ecological Classification Zones — BECz_vancouver","text":"shapefile biogeoclimatic zones coast Vancouver, BC, Canada. use data set, need terra::unwrap first, e.g.: BECz_vancouver <- terra::unwrap(get(data(BECz_vancouver)))","code":""},{"path":"https://bcgov.github.io/climr/reference/BECz_vancouver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Biogeoclimatic Ecological Classification Zones — BECz_vancouver","text":"","code":"BECz_vancouver"},{"path":"https://bcgov.github.io/climr/reference/BECz_vancouver.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Biogeoclimatic Ecological Classification Zones — BECz_vancouver","text":"PackedSpatVector","code":""},{"path":"https://bcgov.github.io/climr/reference/BECz_vancouver.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Biogeoclimatic Ecological Classification Zones — BECz_vancouver","text":"obtained bcdata package, using bcdc_get_data(\"bec-map-generalized-1-20k-\")","code":""},{"path":"https://bcgov.github.io/climr/reference/BECz_vancouver_ras.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Biogeoclimatic Ecological Classification Zones in raster format — BECz_vancouver_ras","title":"Example Biogeoclimatic Ecological Classification Zones in raster format — BECz_vancouver_ras","text":"categorical raster biogeoclimatic zones coast Vancouver, BC, Canada. Derived BECz_vancouver using dem_vancouver template extent, resolution projection information. use data set, need terra::unwrap first, e.g.: BECz_vancouver_ras <- terra::unwrap(get(data(BECz_vancouver_ras)))","code":""},{"path":"https://bcgov.github.io/climr/reference/BECz_vancouver_ras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Biogeoclimatic Ecological Classification Zones in raster format — BECz_vancouver_ras","text":"","code":"BECz_vancouver_ras"},{"path":"https://bcgov.github.io/climr/reference/BECz_vancouver_ras.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Biogeoclimatic Ecological Classification Zones in raster format — BECz_vancouver_ras","text":"PackedSpatRaster","code":""},{"path":"https://bcgov.github.io/climr/reference/BECz_vancouver_ras.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Biogeoclimatic Ecological Classification Zones in raster format — BECz_vancouver_ras","text":"derived BECz_vancouver","code":""},{"path":"https://bcgov.github.io/climr/reference/Caching.html","id":null,"dir":"Reference","previous_headings":"","what":"Return package local cache path — cache_path","title":"Return package local cache path — cache_path","text":"Return package local cache path Clear package's local cache path Attempts delete folder/files cache_path().","code":""},{"path":"https://bcgov.github.io/climr/reference/Caching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return package local cache path — cache_path","text":"","code":"cache_path()  cache_clear(   what = c(\"gcm\", \"gcmts\", \"gcmhist\", \"normal\", \"historic\", \"historic_ts\") )"},{"path":"https://bcgov.github.io/climr/reference/Caching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return package local cache path — cache_path","text":"character. data folders cleared? Accepts \"normal\", \"gcm\" .","code":""},{"path":"https://bcgov.github.io/climr/reference/Caching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return package local cache path — cache_path","text":"character. full path package local cache. TRUE FALSE depending whether cache cleared successfully .","code":""},{"path":"https://bcgov.github.io/climr/reference/Caching.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return package local cache path — cache_path","text":"default, uses tools::R_user_dir(). cache location can set using climr.cache.path option options(\"climr.cache.path\" = \"your_path\"). may fail R permission delete files/folders cache_path() directory","code":""},{"path":[]},{"path":"https://bcgov.github.io/climr/reference/ahccd_pstations.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjusted Precipitation for Canada — ahccd_pstations","title":"Adjusted Precipitation for Canada — ahccd_pstations","text":"points shapefile Adjusted Precipitation Canada (APC2) dataset 462 locations.","code":""},{"path":"https://bcgov.github.io/climr/reference/ahccd_pstations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjusted Precipitation for Canada — ahccd_pstations","text":"","code":"ahccd_pstations"},{"path":"https://bcgov.github.io/climr/reference/ahccd_pstations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Adjusted Precipitation for Canada — ahccd_pstations","text":"PackedSpatVector","code":""},{"path":"https://bcgov.github.io/climr/reference/ahccd_pstations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Adjusted Precipitation for Canada — ahccd_pstations","text":"https://www.canada.ca/en/environment-climate-change/services/climate-change/science-research-data/climate-trends-variability/adjusted-homogenized-canadian-data/precipitation.html","code":""},{"path":"https://bcgov.github.io/climr/reference/ahccd_pstations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjusted Precipitation for Canada — ahccd_pstations","text":"use data set, need terra::unwrap first, e.g.: ahccd_pstations <- terra::unwrap(get(data(ahccd_pstations)))","code":""},{"path":"https://bcgov.github.io/climr/reference/climr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"climr: Downscaling of global climate data — climr-package","title":"climr: Downscaling of global climate data — climr-package","text":"package replicates basic approach ClimateNA (climatena.ca), (1) improved speed, (2) multiple runs GCM, (3) cloud delivery, (4) programmatic access via R. simple downscaling method used bias-correct low-resolution (~100km) global climate model anomalies high-resolution (2km) maps historical climate, elevation adjustment user-specified elevation grids/points based empirical lapse rates (local relationship climate elevation) 2km climate maps. Elevation-adjusted monthly values basic climate elements (temperature precipitation) used estimate derived variables (e.g., degree-days) based published equations parameters Wang et al. 2016.","code":""},{"path":"https://bcgov.github.io/climr/reference/climr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"climr: Downscaling of global climate data — climr-package","text":"Maintainer: Colin Mahony Colin.Mahony@gov.bc.ca (ORCID) Authors: Kiri Daust kiri.daust@gov.bc.ca Bruno Tremblay bruno@boostao.ca (ORCID) Ceres Barros ceres.barros@gov.bc.ca (ORCID) Francois Bornais francois@boostao.ca contributors: Province British Columbia [copyright holder, funder]","code":""},{"path":"https://bcgov.github.io/climr/reference/climr_downscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Self-contained change-factor downscaling of observed and simulated climate data — climr_downscale","title":"Self-contained change-factor downscaling of observed and simulated climate data — climr_downscale","text":"climr_downscale() provides downscaled climate variables user-specified locations. climr_downscale() adapts simple change-factor (aka \"delta') downscaling approach originally implemented ClimateNA. approach downscales climate data three stages: Change-factor downscaling coarse-resolution (50-200km grid) monthly temperature precipitation data climate models observational sources high-resolution (800m grid); Elevation adjustment temperature variables provide scales finer high-resolution reference grid; Calculating derived variables downscaled monthly temperature precipitation variables. See vignette methods_downscaling.Rmd description downscaling methodology. climr_downscale() user-friendly wrapper downscale()","code":""},{"path":"https://bcgov.github.io/climr/reference/climr_downscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Self-contained change-factor downscaling of observed and simulated climate data — climr_downscale","text":"","code":"climr_downscale(   xyz,   which_normal = c(\"auto\", list_normal()),   historic_period = NULL,   historic_ts = NULL,   gcm_models = NULL,   ssp = list_ssp(),   gcm_period = NULL,   gcm_ts_years = NULL,   gcm_hist_years = NULL,   max_run = 0L,   return_normal = TRUE,   vars = sort(sprintf(c(\"PPT%02d\", \"Tmax%02d\", \"Tmin%02d\"), sort(rep(1:12, 3)))),   cache = TRUE,   out_spatial = FALSE,   plot = NULL,   ... )"},{"path":"https://bcgov.github.io/climr/reference/climr_downscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Self-contained change-factor downscaling of observed and simulated climate data — climr_downscale","text":"xyz data.frame following columns \"long\", \"lat\", \"elev\", unique \"id\". extra columns ignored output. which_normal character. climatological normals map use high-resolution reference climate map downscaling. Default \"auto\", selects, query point, best available climatological normals map declining order normals_bc, normals_composite, normals_na. options one list_normal(), provide consistent reference map points. historic_period character. historic period observed climate data, averaged period. Options list_historic(). Default NULL historic_ts integer. Vector years obtain individual years time series observed climate data. Must 1902:2015. Default NULL gcm_models character. Vector global climate model names. Options list_gcm(). Used gcm periods, gcm timeseries, historic timeseries. Default NULL ssp character. Vector SSP-RCP scenarios (representative concentration pathways paired shared socioeconomic pathways). Options list_ssp(). Defaults scenarios available. gcm_period character. 20-year normal periods GCM simulations. Options list_gcm_period() gcm_ts_years character. Timeseries years GCM simulations future scenarios specified ssp. Must 2015:2100 gcm_hist_years character.  Timeseries years GCM simulations historical scenario. Must 1851:2014 max_run integer. Maximum number model runs include. value 0 returns ensembleMean . Runs included order found models data max_run reached. Defaults 0L. return_normal logical. Return downscaled climate values reference normal period (1961-1990)? Default TRUE. vars character. vector climate variables compute. Options list_variables(). Definitions can found calling View(variables) queried loading 'variables' object R environment data(variables). Defaults monthly PPT, Tmax, Tmin. cache logical. Cache data locally? Default TRUE out_spatial logical. SpatVector returned instead data.frame. plot character. out_spatial TRUE, name variable plot. variable exists normal, normal values also plotted. Otherwise, normal January total precipitation (PPT01) values plotted. Defaults plotting (NULL).","code":""},{"path":"https://bcgov.github.io/climr/reference/climr_downscale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Self-contained change-factor downscaling of observed and simulated climate data — climr_downscale","text":"data.frame downscaled climate variables location. outputs returned one table.","code":""},{"path":"https://bcgov.github.io/climr/reference/climr_downscale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Self-contained change-factor downscaling of observed and simulated climate data — climr_downscale","text":"downscale() parameters can applied climr_downscale(). example, setting ppt_lr = TRUE climr_downscale() apply elevation adjustment precipitation values. Although which_normal = \"auto\" default, users cautioned can produce artefacts associated downscaling different reference climate maps within outside western North American boundary normal_composite. recommend queries spanning boundary use which_normal = \"normal_na\".","code":""},{"path":"https://bcgov.github.io/climr/reference/climr_downscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Self-contained change-factor downscaling of observed and simulated climate data — climr_downscale","text":"","code":"{ library(data.table) library(terra) set.seed(123) dbCon <- data_connect() xyz <- data.frame(lon = runif(10, -140, -106), lat = runif(10, 37, 61), elev = runif(10),                   id = 1:10)  ## get bounding box based on input points thebb <- get_bb(xyz) historic <- historic_input(dbCon, thebb, period = \"2001_2020\") plot(historic[[1]][[2]])  ## provide or create a lon, lat, elev, and optionally id, dataframe - usually read from csv file in_xyz <- data.frame(lon = c(-127.70521, -127.62279, -127.56235, -127.7162,                               -127.18585, -127.1254, -126.94957, -126.95507),                      lat = c(55.3557, 55.38847, 55.28537, 55.25721, 54.88135, 54.65636, 54.6913, 54.61025),                      elev = c(291L, 296L, 626L, 377L, 424L, 591L, 723L, 633L),                      id = 1:8,                      Zone = c(rep(\"CWH\",3), rep(\"CDF\",5)),                      Subzone = c(\"vm1\",\"vm2\",\"vs1\",rep(\"mm\",3),\"dk\",\"dc\"))  ## historic observational time series vars <- c(\"PPT\",\"CMD\",\"Tave07\") climate_norms_hist <- climr_downscale(xyz = in_xyz, which_normal = \"auto\",                                       return_normal = TRUE,                                       historic_period = \"2001_2020\",                                       vars = vars,                                       out_spatial = TRUE, plot = \"PPT\") ##specify desired variables to plot  ## as a data.table climate_norms_hist <- climr_downscale(xyz = in_xyz, which_normal = \"auto\",                                       return_normal = TRUE,                                       vars = vars,                                       out_spatial = FALSE, plot = \"PPT\") ##specify desired variables to plot  ## future projections climate_norms_fut <- climr_downscale(xyz = in_xyz, which_normal = \"auto\",                                      gcm_models = c(\"ACCESS-ESM1-5\"),                                      ssp = c(\"ssp370\"),                                      gcm_period = c(\"2021_2040\"),                                      #gcm_ts_years = 2020:2060,                                      max_run = 3, #' we want 3 individual runs for each model                                      vars = vars) } #> terra 1.7.71 #>  #> Attaching package: ‘terra’ #> The following object is masked from ‘package:data.table’: #>  #>     shift #> Downloading historic anomalies #> . #> Caching data... #> Welcome to climr! #> 'gcm_models' is missing. 'gcm_hist_years', 'gcm_ts_years', 'gcm_period' and 'ssp' will be ignored #> 'gcm_models' is missing. 'max_run' will be ignored #> Getting normals... #> for BC... #> Downloading new data... #> . #> Caching data... #> Getting historic... #> Retrieving from cache... #> Downscaling!! #> Plotting results for a single period/GCM/run/SSP  #> Welcome to climr! #> 'gcm_models' is missing. 'gcm_hist_years', 'gcm_ts_years', 'gcm_period' and 'ssp' will be ignored #> 'gcm_models' is missing. 'max_run' will be ignored #> Getting normals... #> for BC... #> Retrieving from cache... #> Downscaling!! #> Warning: 'gcm', 'gcm_ts', 'gcm_hist', 'historic' and 'historic_ts' are missing. Nothing to downscale. #> Welcome to climr! #> Getting normals... #> for BC... #> Retrieving from cache... #> Getting GCMs... #> Downloading GCM anomalies #> . #> Caching data... #> Downscaling!!"},{"path":"https://bcgov.github.io/climr/reference/data-option-lists.html","id":null,"dir":"Reference","previous_headings":"","what":"List available runs, global circulation models, periods and climate scenarios — list_gcm","title":"List available runs, global circulation models, periods and climate scenarios — list_gcm","text":"list_gcm lists available global circulation models. list_ssp lists available shared socioeconomic pathways. list_gcm_period lists available periods. list_run lists available runs given GCM. list_normal lists available normals. list_historic lists available historic periods list_variables lists climate variables","code":""},{"path":"https://bcgov.github.io/climr/reference/data-option-lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available runs, global circulation models, periods and climate scenarios — list_gcm","text":"","code":"list_gcm()  list_ssp()  list_gcm_period()  list_run(dbCon, gcm)  list_normal()  list_historic()  list_variables(   set = c(\"All\", \"Monthly\", \"Seasonal\", \"Annual\"),   only_extra = FALSE )"},{"path":"https://bcgov.github.io/climr/reference/data-option-lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List available runs, global circulation models, periods and climate scenarios — list_gcm","text":"dbCon db connection object created data_connect. gcm Character vector specify requested GCMs set character. One , Monthly, Seasonal, Annual, combination thereof. Defaults \"\". only_extra logical. Tmin, Tmax PPT excluded? Defaults FALSE.","code":""},{"path":"https://bcgov.github.io/climr/reference/data-option-lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available runs, global circulation models, periods and climate scenarios — list_gcm","text":"character vector.","code":""},{"path":"https://bcgov.github.io/climr/reference/data-option-lists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List available runs, global circulation models, periods and climate scenarios — list_gcm","text":"Currently available normals (list_normal()) : \"normal_na\" Climate NA derived normals \"normal_bc\" British Columbia PRISM climatologies derived normals \"normal_composite\" composite BC PRISM, adjusted US PRISM DAYMET (Alberta Saskatchewan), covering western Canada western US.","code":""},{"path":"https://bcgov.github.io/climr/reference/data_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to PostGIS database — data_connect","title":"Connect to PostGIS database — data_connect","text":"Connect PostGIS database","code":""},{"path":"https://bcgov.github.io/climr/reference/data_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to PostGIS database — data_connect","text":"","code":"data_connect()"},{"path":"https://bcgov.github.io/climr/reference/data_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to PostGIS database — data_connect","text":"pool object database connection","code":""},{"path":"https://bcgov.github.io/climr/reference/dem_vancouver.html","id":null,"dir":"Reference","previous_headings":"","what":"Example DEM — dem_vancouver","title":"Example DEM — dem_vancouver","text":"Digital elevation model North Vancouver, BC, Canada. use data set, need terra::unwrap first, e.g.: dem_vancouver <- terra::unwrap(get(data(dem_vancouver)))","code":""},{"path":"https://bcgov.github.io/climr/reference/dem_vancouver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example DEM — dem_vancouver","text":"","code":"dem_vancouver"},{"path":"https://bcgov.github.io/climr/reference/dem_vancouver.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example DEM — dem_vancouver","text":"PackedSpatRaster","code":""},{"path":"https://bcgov.github.io/climr/reference/dem_vancouver.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example DEM — dem_vancouver","text":"todo add/describe source","code":""},{"path":"https://bcgov.github.io/climr/reference/dem_vancouver_lowres.html","id":null,"dir":"Reference","previous_headings":"","what":"Example low resolution DEM — dem_vancouver_lowres","title":"Example low resolution DEM — dem_vancouver_lowres","text":"lower resolution version dem_vancouver, re-projected 0.005 degrees. use data set, need terra::unwrap first, e.g.: dem_vancouver_lowres <- terra::unwrap(get(data(dem_vancouver_lowres)))","code":""},{"path":"https://bcgov.github.io/climr/reference/dem_vancouver_lowres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example low resolution DEM — dem_vancouver_lowres","text":"","code":"dem_vancouver_lowres"},{"path":"https://bcgov.github.io/climr/reference/dem_vancouver_lowres.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example low resolution DEM — dem_vancouver_lowres","text":"PackedSpatRaster","code":""},{"path":"https://bcgov.github.io/climr/reference/dem_vancouver_lowres.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example low resolution DEM — dem_vancouver_lowres","text":"todo add/describe source","code":""},{"path":"https://bcgov.github.io/climr/reference/downscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Change-factor downscaling of observed and simulated climate data — downscale","title":"Change-factor downscaling of observed and simulated climate data — downscale","text":"downscale() engine climr_downscale(). takes user-supplied high- low-resolution rasters input downscales user-specified point locations. less user-friendly climr_downscale(), downscale() flexible users can supply raster inputs. example, user supply high-resolution climate map, instead available climr, input normal.","code":""},{"path":"https://bcgov.github.io/climr/reference/downscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change-factor downscaling of observed and simulated climate data — downscale","text":"","code":"downscale(   xyz,   normal,   gcm = NULL,   historic = NULL,   gcm_ts = NULL,   gcm_hist = NULL,   historic_ts = NULL,   return_normal = FALSE,   vars = sort(sprintf(c(\"PPT%02d\", \"Tmax%02d\", \"Tmin%02d\"), sort(rep(1:12, 3)))),   ppt_lr = FALSE,   nthread = 1L,   out_spatial = FALSE,   plot = NULL )"},{"path":"https://bcgov.github.io/climr/reference/downscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change-factor downscaling of observed and simulated climate data — downscale","text":"xyz data.frame following columns \"long\", \"lat\", \"elev\", unique \"id\". extra columns ignored output. normal SpatRaster. Outputs normal_input(). high-resolution climate maps use downscaling baseline. gcm list SpatRasters. Outputs gcm_input(). Global climate model data 20-year normal periods downscaled. Default NULL. historic list SpatRasters. Outputs historic_input(). Observed climate data 20-year normal periods downscaled. Default NULL. gcm_ts list SpatRasters. Outputs gcm_ts_input(). Global climate model time series ssp-rcp scenarios downscaled. Default NULL. gcm_hist list SpatRasters. Outputs gcm_hist_input(). Global climate model time series historical scenario downscaled. Default NULL. historic_ts list SpatRasters. Outputs historic_input_ts(). Observed climate time series downscaled. Default NULL. return_normal logical. Return downscaled climate values reference normal period (1961-1990)? Default TRUE. vars character. vector climate variables compute. Options list_variables(). Definitions can found calling View(variables) queried loading 'variables' object R environment data(variables). Defaults monthly PPT, Tmax, Tmin. ppt_lr logical. Apply elevation adjustment precipitation. Default FALSE. nthread integer. Number parallel threads use computations. Default 1L. out_spatial logical. SpatVector returned instead data.frame. plot character. out_spatial TRUE, name variable plot. variable exists normal, normal values also plotted. Otherwise, normal January total precipitation (PPT01) values plotted. Defaults plotting (NULL).","code":""},{"path":"https://bcgov.github.io/climr/reference/downscale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change-factor downscaling of observed and simulated climate data — downscale","text":"data.table SpatVector downscaled climate variables. gcm NULL, just downscaled normal point locations. gcm provided, returns downscaled dataset point location, general circulation model (GCM), shared socioeconomic pathway (SSP), run period.","code":""},{"path":"https://bcgov.github.io/climr/reference/downscale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change-factor downscaling of observed and simulated climate data — downscale","text":"recommend climr_downscale() purposes.","code":""},{"path":[]},{"path":"https://bcgov.github.io/climr/reference/downscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change-factor downscaling of observed and simulated climate data — downscale","text":"","code":"if (FALSE) { dbCon <- data_connect() on.exit(try(pool::poolClose(dbCon))) xyz <- data.frame(lon = runif(10, -140, -106), lat = runif(10, 37, 61), elev = runif(10), id = 1:10)  ## get bounding box based on input points thebb <- get_bb(xyz) normal <- normal_input(dbCon = dbCon, bbox = thebb, cache = TRUE)  ## pick one GCM, one SSP and one period from the list of available options  gcm <- gcm_input(dbCon, thebb, gcm = list_gcm()[3], list_ssp()[1], list_gcm_period()[2])  ## notice coarseness of the data terra::plot(gcm[[1]])  downscale(xyz, normal, gcm) historic <- historic_input(dbCon, thebb) terra::plot(historic[[1]])  downscale(xyz, normal, gcm = NULL, historic = historic, ppt_lr = FALSE) }"},{"path":"https://bcgov.github.io/climr/reference/gcm-input-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve GCM anomalies for downscale. — gcm_input","title":"Retrieve GCM anomalies for downscale. — gcm_input","text":"gcm_input retrieves anomalies GCM data, given chosen GCMs, SSPs, periods runs. gcm_hist_input creates GCM historic time series inputs, given chosen GCMs, years runs. gcm_ts_input creates future GCM time series inputs, given chosen GCMs, SSPs, years runs.","code":""},{"path":"https://bcgov.github.io/climr/reference/gcm-input-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve GCM anomalies for downscale. — gcm_input","text":"","code":"gcm_input(   dbCon,   bbox = NULL,   gcm = list_gcm(),   ssp = list_ssp(),   period = list_gcm_period(),   max_run = 0L,   cache = TRUE )  gcm_hist_input(   dbCon,   bbox = NULL,   gcm = list_gcm(),   years = 1901:1950,   max_run = 0L,   cache = TRUE )  gcm_ts_input(   dbCon,   bbox = NULL,   gcm = list_gcm(),   ssp = list_ssp(),   years = 2020:2030,   max_run = 0L,   cache = TRUE )"},{"path":"https://bcgov.github.io/climr/reference/gcm-input-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve GCM anomalies for downscale. — gcm_input","text":"dbCon db connection object created data_connect. bbox numeric. Vector length 4 giving bounding box study region, created get_bb(). gcm character. Vector labels global circulation models use. Can obtained list_gcm(). Default GCMs available. ssp character. Vector SSP-RCP scenarios (representative concentration pathways paired shared socioeconomic pathways). Options list_ssp(). Defaults scenarios available. period character. Vector labels periods use. Can obtained list_gcm_period(). Defaults periods available. max_run integer. Maximum number model runs include. value 0 returns ensembleMean . Runs included order found models data max_run reached. Defaults 0L. cache logical. Specifying whether cache new data locally . Defaults TRUE. years Numeric character vector 2020:2100. Defaults 2020:2030.","code":""},{"path":"https://bcgov.github.io/climr/reference/gcm-input-data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve GCM anomalies for downscale. — gcm_input","text":"list SpatRasters, possibly multiple layers, can used downscale(). list SpatRasters, possibly multiple layers, can used downscale(). list SpatRasters, possibly multiple layers, can used downscale().","code":""},{"path":"https://bcgov.github.io/climr/reference/gcm-input-data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve GCM anomalies for downscale. — gcm_input","text":"function returns list one slot requested GCM. Rasters inside list contain anomalies requested SSPs, runs, periods. general function used combination downscale(). function returns list one slot requested GCM. Rasters inside list contain anomalies runs years. general function used combination downscale(). function returns list one slot requested GCM. Rasters inside list contain anomalies SSPs, runs years. general function used combination downscale(). Note request multiple runs, multiple SSPs, lot years, take download data (lot ).","code":""},{"path":[]},{"path":"https://bcgov.github.io/climr/reference/gcm-input-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve GCM anomalies for downscale. — gcm_input","text":"","code":"{ library(terra) xyz <- data.frame(lon = runif(10, -140, -106), lat = runif(10, 37, 61), elev = runif(10), id = 1:10)  ## get bounding box based on input points thebb <- get_bb(xyz)  ## get database connection dbCon <- data_connect()  on.exit(try(pool::poolClose(dbCon)))  gcm <- gcm_input(dbCon, thebb, list_gcm()[1], list_ssp()[1])  ## show ensemble means only lyrs <- grep(\"ensemble\", names(gcm$`ACCESS-ESM1-5`))  plot(gcm$`ACCESS-ESM1-5`[[lyrs]]) } #> Downloading GCM anomalies #> . #> Caching data...   { library(terra) xyz <- data.frame(lon = runif(10, -140, -106), lat = runif(10, 37, 61), elev = runif(10), id = 1:10)  ## get bounding box based on input points thebb <- get_bb(xyz)  ## get database connection dbCon <- data_connect() on.exit(try(pool::poolClose(dbCon)))  gcm_hist <- gcm_hist_input(dbCon, thebb, list_gcm()[1])  ## show ensemble means only lyrs <- grep(\"ensemble\", names(gcm_hist$`ACCESS-ESM1-5`))  plot(gcm_hist$`ACCESS-ESM1-5`[[lyrs]]) } #> Downloading GCM anomalies #> Caching data...   { library(terra) xyz <- data.frame(lon = runif(10, -140, -106), lat = runif(10, 37, 61), elev = runif(10), id = 1:10)  ## get bounding box based on input points thebb <- get_bb(xyz)  ## get database connection dbCon <- data_connect()  on.exit(try(pool::poolClose(dbCon)))  gcm_ts <- gcm_ts_input(dbCon, thebb, list_gcm()[1], list_ssp()[1])  ## show ensemble means only lyrs <- grep(\"ensemble\", names(gcm_ts$`ACCESS-ESM1-5`))  plot(gcm_ts$`ACCESS-ESM1-5`[[lyrs]]) } #> Downloading GCM anomalies #> Precip... #> . #> Tmax... #> . #> Tmin... #> . #> Caching data..."},{"path":"https://bcgov.github.io/climr/reference/get_bb.html","id":null,"dir":"Reference","previous_headings":"","what":"Find bounding box of data — get_bb","title":"Find bounding box of data — get_bb","text":"Find bounding box data","code":""},{"path":"https://bcgov.github.io/climr/reference/get_bb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find bounding box of data — get_bb","text":"","code":"get_bb(in_xyz)"},{"path":"https://bcgov.github.io/climr/reference/get_bb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find bounding box of data — get_bb","text":"in_xyz data.table (data.frame) points downscale columns \"lon\", \"lat\", \"elev\" \"id\"","code":""},{"path":"https://bcgov.github.io/climr/reference/get_bb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find bounding box of data — get_bb","text":"integer. bounding box (e.g. c(51, 50, -121, -122))","code":""},{"path":"https://bcgov.github.io/climr/reference/hist-input-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download historic period anomalies. — historic_input","title":"Download historic period anomalies. — historic_input","text":"historic_input produces anomalies historic observed climate given period. historic_input_ts produces anomalies historic observed climate given time series.","code":""},{"path":"https://bcgov.github.io/climr/reference/hist-input-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download historic period anomalies. — historic_input","text":"","code":"historic_input(dbCon, bbox = NULL, period = list_historic(), cache = TRUE)  historic_input_ts(dbCon, bbox = NULL, years = 2010:2022, cache = TRUE)"},{"path":"https://bcgov.github.io/climr/reference/hist-input-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download historic period anomalies. — historic_input","text":"dbCon db connection object created data_connect. bbox numeric. Vector length 4 giving bounding box study region, created get_bb(). period character. Vector labels periods use. Can obtained list_historic(). Default \"2001_2020\". cache logical. Specifying whether cache new data locally . Defaults TRUE. years numeric. Years retrieve historic anomalies , 1902:2022. Default 2010:2022","code":""},{"path":"https://bcgov.github.io/climr/reference/hist-input-data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download historic period anomalies. — historic_input","text":"list SpatRasters, possibly multiple layers, can used downscale(). element list corresponds particular period, values SpatRaster anomalies historic period compare normal period. List length 1 containing SpatRaster","code":""},{"path":"https://bcgov.github.io/climr/reference/hist-input-data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download historic period anomalies. — historic_input","text":"Generally, function used combination downscale() values returned rasters anomalies compared 1961-1990 normal period, usually meaningful without whole downscale process. returned raster contains anomalies year specified years. general function used conjunction downscale().","code":""},{"path":[]},{"path":"https://bcgov.github.io/climr/reference/lapse_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of gridded lapse rates — lapse_rate","title":"Calculation of gridded lapse rates — lapse_rate","text":"function computes lapse rates (linear relationship climate variable elevation) across user-provided rasters. Lapse rates calculated using simple linear regression (without intercept) using focal cell eight neighbors observations. gridded lapse rates used downscale() climr_downscale() elevation adjustment climate values downscaling user-specified locations. method illustrated vignette vignette(\"lapse_rates\")","code":""},{"path":"https://bcgov.github.io/climr/reference/lapse_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of gridded lapse rates — lapse_rate","text":"","code":"lapse_rate(normal, dem, NA_replace = TRUE, nthread = 1L, rasterize = TRUE)"},{"path":"https://bcgov.github.io/climr/reference/lapse_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of gridded lapse rates — lapse_rate","text":"normal SpatRaster stack. climate rasters compute lapse rates . Build package functions. dem SpatRaster. digital elevation model raster. needed normal SpatRaster. Defaults NULL. NA_replace logical. NA lapse rate results replaced zeros. Default TRUE. nthread integer. Number parallel threads use compute lapse rates. rasterize logical. Return object class category normal extent? Default TRUE.","code":""},{"path":"https://bcgov.github.io/climr/reference/lapse_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of gridded lapse rates — lapse_rate","text":"SpatRaster lapse rate values.","code":""},{"path":"https://bcgov.github.io/climr/reference/lapse_rate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of gridded lapse rates — lapse_rate","text":"Formulas  beta_coef = sum(xy) / sum(x²)  mss = sum(x * beta_coef)², sum squared fitted values  rss = sum(ε²), sum squared (y minus fitted), sum absolute errors  R² = mss / (mss + rss)  Lapse rate = beta_coef * R²","code":""},{"path":"https://bcgov.github.io/climr/reference/normal-input-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve climatologies for normal period — normal_input","title":"Retrieve climatologies for normal period — normal_input","text":"function downloads (retrieves cache) monthly Tmin, Tmax, PPT variables specified climatology specified bounding box. intended use downscale(), can also used stand-alone climatology.","code":""},{"path":"https://bcgov.github.io/climr/reference/normal-input-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve climatologies for normal period — normal_input","text":"","code":"normal_input(dbCon, bbox, normal = \"normal_na\", cache = TRUE)"},{"path":"https://bcgov.github.io/climr/reference/normal-input-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve climatologies for normal period — normal_input","text":"dbCon db connection object created data_connect. bbox numeric. Vector length 4 giving bounding box study region, created get_bb(). normal character SpatRaster. character, label normal baseline use. Can obtained list_normal(). SpatRaster, 36 layers normal climate variables names PPT01:PPT12, Tmax01:Tmax12 Tmin01:Tmin12. Defaults list_normal()[1]. cache logical. Specifying whether cache new data locally . Defaults TRUE.","code":""},{"path":"https://bcgov.github.io/climr/reference/normal-input-data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve climatologies for normal period — normal_input","text":"SpatRaster containing normals, lapse rates digital elevation model layers, can used downscale().","code":""},{"path":"https://bcgov.github.io/climr/reference/normal-input-data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve climatologies for normal period — normal_input","text":"first 36 layers output raster correspond actual climate variables. raster also contains lapse rates variable, corresponding digital elevation model.","code":""},{"path":[]},{"path":"https://bcgov.github.io/climr/reference/pgGetTerra.html","id":null,"dir":"Reference","previous_headings":"","what":"Download raster with bounding box from PostGIS — pgGetTerra","title":"Download raster with bounding box from PostGIS — pgGetTerra","text":"Download raster bounding box PostGIS","code":""},{"path":"https://bcgov.github.io/climr/reference/pgGetTerra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download raster with bounding box from PostGIS — pgGetTerra","text":"","code":"pgGetTerra(conn, name, tile, rast = \"rast\", bands = 37:73, boundary)"},{"path":"https://bcgov.github.io/climr/reference/pgGetTerra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download raster with bounding box from PostGIS — pgGetTerra","text":"conn DBI RPostgres connection object. name character. Table name database. tile Logical. Retrieve data tiles avoid overloading database? rast character. Name column stores raster data. Defaults \"rast\" bands numeric. raster bands return. Default 37:73. boundary numeric. Vector length 4 (ymax,ymin,xmax,xmin). Defaults NULL.","code":""},{"path":"https://bcgov.github.io/climr/reference/pgGetTerra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download raster with bounding box from PostGIS — pgGetTerra","text":"SpatRaster","code":""},{"path":"https://bcgov.github.io/climr/reference/vancouver.html","id":null,"dir":"Reference","previous_headings":"","what":"Example line data — vancouver","title":"Example line data — vancouver","text":"Shapefile coast Vancouver, BC, Canada. Mostly used plotting. use data set, need terra::unwrap first, e.g.: vancouver <- terra::unwrap(get(data(vancouver)))","code":""},{"path":"https://bcgov.github.io/climr/reference/vancouver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example line data — vancouver","text":"","code":"vancouver"},{"path":"https://bcgov.github.io/climr/reference/vancouver.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example line data — vancouver","text":"PackedSpatVector","code":""},{"path":"https://bcgov.github.io/climr/reference/vancouver.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example line data — vancouver","text":"todo add/describe source","code":""},{"path":"https://bcgov.github.io/climr/reference/vancouver_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Example point locations — vancouver_points","title":"Example point locations — vancouver_points","text":"Shapefile point locations North Vancouver, BC, Canada. use data set, need terra::unwrap first, e.g.: vancouver_points <- terra::unwrap(get(data(vancouver_points)))","code":""},{"path":"https://bcgov.github.io/climr/reference/vancouver_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example point locations — vancouver_points","text":"","code":"vancouver_points"},{"path":"https://bcgov.github.io/climr/reference/vancouver_points.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example point locations — vancouver_points","text":"PackedSpatVector","code":""},{"path":"https://bcgov.github.io/climr/reference/vancouver_points.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example point locations — vancouver_points","text":"derived dem_vancouver","code":""},{"path":"https://bcgov.github.io/climr/reference/vancouver_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Example polygon locations — vancouver_poly","title":"Example polygon locations — vancouver_poly","text":"Shapefile North Vancouver polygon format, BC, Canada. use data set, need terra::unwrap first, e.g.: vancouver_poly <- terra::unwrap(get(data(vancouver_poly)))","code":""},{"path":"https://bcgov.github.io/climr/reference/vancouver_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example polygon locations — vancouver_poly","text":"","code":"vancouver_poly"},{"path":"https://bcgov.github.io/climr/reference/vancouver_poly.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example polygon locations — vancouver_poly","text":"PackedSpatVector","code":""},{"path":"https://bcgov.github.io/climr/reference/vancouver_poly.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example polygon locations — vancouver_poly","text":"derived dem_vancouver","code":""},{"path":"https://bcgov.github.io/climr/reference/variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Available climate variables — variables","title":"Available climate variables — variables","text":"List available climate variables climr","code":""},{"path":"https://bcgov.github.io/climr/reference/variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available climate variables — variables","text":"","code":"variables"},{"path":"https://bcgov.github.io/climr/reference/variables.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Available climate variables — variables","text":"data.table columns: Code variable code name Variable variable description (full name) Time time year variable corresponds (e.g, summer, August, year) Category time resolution (e.g., annual, monthly, seasonal, etc.) Scale whether variable scaled, raw values","code":""},{"path":[]},{"path":"https://bcgov.github.io/climr/news/index.html","id":"enhancements-0-0-2","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"climr 0.0.2","text":"new tests comparing reference outputs code streamlined new messages warn user meaningless downscale/climr_downscale argument combinations argument options climr_downscale(..., which_normal) now match options normal_input(..., normal)","code":""},{"path":"https://bcgov.github.io/climr/news/index.html","id":"behaviour-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Behaviour changes","title":"climr 0.0.2","text":"xyz (argument climr_downscale downscale) in_xyz (argument get_bb), must now 4 column data.table (coercible class) lon, lat, elev id columns. columns ignored returned. Column order longer matters.","code":""},{"path":"https://bcgov.github.io/climr/news/index.html","id":"bugfixes-0-0-2","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"climr 0.0.2","text":"fixed temperature values composite anomalies name composite anomalies changed “normal_composite” normal_input(..., normal).","code":""},{"path":"https://bcgov.github.io/climr/news/index.html","id":"documentation-0-0-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"climr 0.0.2","text":"added vignettes","code":""},{"path":[]},{"path":"https://bcgov.github.io/climr/news/index.html","id":"enhancements-0-0-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"climr 0.0.1","text":"continuous testing implemented via GitHub Actions code cleaned following tidyverse syntax recommendations internal function definitions now avoided improvements function documentation removal deprecated functions increased code coverage code streamlining added new composite climatologies Western Canada Western US.","code":""},{"path":"https://bcgov.github.io/climr/news/index.html","id":"bugfixes-0-0-1","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"climr 0.0.1","text":"fixed examples fixed incomplete changing package name (climRpnw climr) added missing pkg imports fixed caching problem cached objects retrieved PostGIS server unavailable fixed model names PostGIS server, fixed bugs gcm_hist_input gcm_ts_input.","code":""},{"path":"https://bcgov.github.io/climr/news/index.html","id":"dependency-changes-0-0-1","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"climr 0.0.1","text":"methods removed Imports sf added Imports","code":""},{"path":"https://bcgov.github.io/climr/news/index.html","id":"other-0-0-1","dir":"Changelog","previous_headings":"","what":"Other","title":"climr 0.0.1","text":"old data base access functions removed","code":""},{"path":"https://bcgov.github.io/climr/news/index.html","id":"climr-0009990","dir":"Changelog","previous_headings":"","what":"climr 0.0.0.9990","title":"climr 0.0.0.9990","text":"Beta-version","code":""}]
