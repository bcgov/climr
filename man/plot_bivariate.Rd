% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_bivariate.R
\name{plot_bivariate}
\alias{plot_bivariate}
\title{Bivariate climate change plots}
\usage{
plot_bivariate(
  xyz,
  xvar = "Tave_sm",
  yvar = "PPT_sm",
  which_normal = "auto",
  period_focal = list_gcm_period()[1],
  gcm_models = list_gcm()[c(1, 4, 5, 6, 7, 10, 11, 12)],
  ssp = list_ssp()[2],
  historic_period = list_historic()[1],
  gcm_period = list_gcm_period(),
  max_run = 10,
  legend_pos = "bottomleft",
  show_runs = TRUE,
  show_ensMean = TRUE,
  show_observed = TRUE,
  show_trajectories = TRUE,
  interactive = FALSE,
  cache = TRUE
)
}
\arguments{
\item{xyz}{a \code{data.frame} with the following columns "long", "lat", "elev",
and a unique "id". Any extra columns will be ignored and not output.}

\item{xvar}{character. x-axis variable. options are \code{list_variables()}.}

\item{yvar}{character. y-axis variable. options are \code{list_variables()}.}

\item{which_normal}{character. Which normal layer to use.
Default is "auto", which selects the highest resolution normal for each point.
Other options are one of \code{\link[=list_normal]{list_normal()}}}

\item{period_focal}{character. The 20-year period for which to plot the ensemble detail. options are \code{list_gcm_period()}.}

\item{gcm_models}{character. Vector of GCM names. Options are \code{\link[=list_gcm]{list_gcm()}}. Used for gcm periods, gcm timeseries, and historic timeseries. Default \code{NULL}}

\item{ssp}{character. Vector of labels of the shared socioeconomic pathways to use.
See available options with \code{\link[=list_ssp]{list_ssp()}}. Defaults to all SSPs available.}

\item{historic_period}{character. Which historic period. Default \code{NULL}}

\item{gcm_period}{character. Requested future periods. Options are \code{\link[=list_gcm_period]{list_gcm_period()}}}

\item{max_run}{integer. Maximum number of model runs to include.
A value of 0 returns the \code{ensembleMean} only. Runs are included in the order they
are found in the models data until \code{max_run} is reached. Defaults to 0L.}

\item{legend_pos}{character. Position of the legend. Options are \code{c("bottomright", "bottom", "bottomleft", "left", "topleft", "top", "topright", "right", "center")}.}

\item{show_runs}{logical. If TRUE, the individual runs of the model are plotted (for \code{period_focal} only) in addition to the single-model ensemble mean.}

\item{show_ensMean}{logical. If TRUE, the multi-model ensemble mean is plotted (for \code{period_focal} only).}

\item{show_observed}{logical. If TRUE, the 2001-2020 observed climate is plotted.}

\item{show_trajectories}{logical. If TRUE, the values of the single-model ensemble mean are plotted for all 20-year periods in \code{list_gcm_period()}, connected by an interpolation spline.}

\item{interactive}{logical. If TRUE, an interactive plot is generated using \code{{plotly}}. If FALSE, a plot is generated using base graphics.}

\item{cache}{logical. Cache data locally? Default \code{TRUE}}
}
\value{
NULL. Draws a plot in the active graphics device.
}
\description{
Bivariate plots of 21st century climate change for user-selected locations and climate variables.
}
\details{
The input table \code{xyz} can be a single location or multiple locations. If multiple locations, the plot provides the mean of the anomalies for these locations.
The climate change trajectories provided by \code{show_trajectories} are points for each of the five 20-year periods specified by \code{list_gcm_period()}. These points are connected with an interpolation spline when the x variable is monotonic; otherwise the trajectory points are connected by straight lines.
This plot is designed to be used with a single SSP scenario. If multiple scenarios are passed to the plot, the GCM means and ensemble mean are averaged across the scenarios, but the individual runs for all scenarios are plotted separately.
}
\examples{
# data frame of arbitrary points on vancouver island
my_points <- data.frame(lon = c(-123.4404, -123.5064, -124.2317),
                        lat = c(48.52631, 48.46807, 49.21999),
                        elev = c(52, 103, 357),
                        id = LETTERS[1:3]
)

# draw the plot
plot_bivariate(my_points)

# export plot to the working directory
png(filename="plot_test.png", type="cairo", units="in", width=6, height=5, pointsize=10, res=300)
plot_bivariate(my_points)
dev.off()

}
